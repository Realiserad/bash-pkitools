#!/bin/bash

#################################################################
###                                                           ###
###            EJBCA Restore Script for MariaDB               ###
###                                                           ###
#################################################################

# This script relies on Percona XtraBackup, and this package must
# be installed before making any backups. Ensure the backup being
# restored was not created by a newer version of XtraBackup than
# the version available during a restore.

# Backup directory from where the backup is restored, can be mapped
# to e.g. an NFS share
BACKUP_DIR='/var/opt/backups'

# The passphrase which protects the backup, clear this variable
# to make the script ask for the passphrase.
PWD=

################################################################

# The user running this script must be in the wheel group, unless
# the script is running as root
if [ "$UID" -ne 0 ]; then
  exec sudo bash "$0" "$@"
fi

if [ "$(id -u)" != "0" ]; then
  echo "Root access denied."
  exit 1
fi

# MariaDB must be stopped before the backup is restored
if systemctl is-active --quiet mysql; then
  echo 'Cannot restore a backup while MariaDB is running.'
  exit 1
fi

# Warn the user about potential loss of data
read -p '** WARNING ** You are about to wipe the existing database! Do you want to proceed? (y/N) ' wipe
if [ "$wipe" != "y" ] && [ "$wipe" != "Y" ]; then
  echo 'Aborting restore.'
  exit 1
fi

# Let the user select the backup to restore.
echo 'Available backups:'
PS3='Select backup to restore: '
select opt in "$BACKUP_DIR/"xb_*.tar.gz.enc; do
  break
done

if [ -z "$opt" ]; then
  echo "Option $REPLY is not a valid backup. Bye!"
  exit 1
fi

if [ -z "$PWD" ]; then
  read -s -p 'Password for backup: ' PWD
  echo ""
fi

DATE=$(date '+%Y%m%d%H%M%S')

# Write the backup encryption password to a temporary file, only
# readable by the current user. Writing the password to disk is
# not optimal, but we need to conceal it from ps.
ENC_KEY_PASS_FILE="/tmp/xb_ejbca_restore_${DATE}.pass"
echo -n "$PWD" > "$ENC_KEY_PASS_FILE"
chmod 600 "$ENC_KEY_PASS_FILE"

# Wipe existing database files
rm -rf /var/lib/mysql/*

# Restore the backup
echo 'Decrypting and decompressing backup... (this may take some time)'
PV=$(which pv)
if [ -z "$PV" ]; then
  echo '** HINT ** Install pv to track progress.'
  openssl enc -aes-256-cbc -pass "file:$ENC_KEY_PASS_FILE" -d -in "$opt" | \
    tar xzi -C /var/lib/mysql
else
  openssl enc -aes-256-cbc -pass "file:$ENC_KEY_PASS_FILE" -d -in "$opt" | \
    pv -p -t -b | \
    tar xzi -C /var/lib/mysql
fi

echo 'Copy-back complete! Preparing the backup...'
xtrabackup --prepare --target-dir=/var/lib/mysql/
# Your backup is now clean and consistent, and ready to restore.
# However, you might want to take an extra step to make restores
# as quick as possible. This is to prepare the backup a second
# time. The first time makes the data files self-consistent, but
# it doesnâ€™t create fresh InnoDB log files. If you restore the
# backup at this point and start MariaDB, it will have to create
# new log files, which could take a little while, and you might
# not want to wait for that.
xtrabackup --prepare --target-dir=/var/lib/mysql/

chown -R mysql:mysql /var/lib/mysql

read -p 'Do you want to start MariaDB? (y/N) ' start
if [ "$start" = "y" ] || [ "$start" = "Y" ]; then
  echo "Starting MariaDB..."
  systemctl start mysql
fi

shred --remove "$ENC_KEY_PASS_FILE"
